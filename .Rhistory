use_data_raw()
use_data_raw
use_package("withr")
use_package("callr")
use_package("purrr")
?bench
library(bench)
use_package("bench")
?bench
?callr::r
bench
library(bench)
?bench
bench::mark
#' @export
setup_libs <- function(){
dir.create("libs")
dir.create("libs/0.7.7")
dir.create("libs/0.8.0-unwind")
dir.create("libs/0.8.0-no-unwind")
install.packages("dplyr", lib = "libs/0.7.7")
withr::with_envvar(
c("DPLYR_COMPILER_FLAGS" = "-URCPP_USE_UNWIND_PROTECT"),
withr::with_libpaths("libs/0.8.0-no-unwind",
devtools::install_github("tidyverse/dplyr")
)
)
withr::with_envvar(
c("DPLYR_COMPILER_FLAGS" = "-DRCPP_USE_UNWIND_PROTECT"),
withr::with_libpaths("libs/0.8.0-unwind",
devtools::install_github("tidyverse/dplyr")
)
)
}
setup_libs
setup_libs()
libs <- list.files("libs")
libs
benchs <- function(...){
libs <- list.files("libs")
f <- function(...){
function(){
library(dplyr, warn.conflicts = FALSE)
bench::mark(...)
}
}
callr::r(f(...))
}
benchs(iris %>% group_by(Species))
bench::mark
?mark
bench:::dots
benchs <- function(...){
libs <- list.files("libs")
f <- function(...){
dots <- list(...)
function(){
library(dplyr, warn.conflicts = FALSE)
do.call(bench::mark, dots)
}
}
callr::r(f(...))
}
benchs(iris %>% group_by(Species))
benchs(iris %>% group_by(Species))
benchs <- function(...){
libs <- list.files("libs")
f <- function(...){
dots <- bench:::dots(...)
function(){
library(dplyr, warn.conflicts = FALSE)
do.call(bench::mark, dots)
}
}
callr::r(f(...))
}
benchs(iris %>% group_by(Species))
benchs <- function(code){
expr <- rlang::expr(function(){
library(dplyr, warn.conflicts = FALSE)
bench::mark(!!code)
})
# callr::r(f)
}
benchs(iris %>% group_by(Species))
benchs <- function(code){
code <- enexpr(code)
expr <- rlang::expr(function(){
library(dplyr, warn.conflicts = FALSE)
bench::mark(!!code)
})
# callr::r(f)
}
benchs(iris %>% group_by(Species))
use_package(rlang)
use_package("rlang")
library(dplyrbench)
benchs
benchs(iris %>% group_by(Species))
rm(benchs)
library(dplyrbench)
benchs(iris %>% group_by(Species))
library(dplyrbench)
library(dplyrbench)
benchs(iris %>% group_by(Species))
library(dplyrbench)
benchs(iris %>% group_by(Species))
library(dplyrbench)
benchs(iris %>% group_by(Species))
x <- benchs(iris %>% group_by(Species))
x
eval(x)
library(dplyrbench)
x <- benchs(iris %>% group_by(Species))
x
library(dplyrbench)
benchs(iris %>% group_by(Species))
library(dplyrbench)
benchs(iris %>% group_by(Species))
x <- benchs(iris %>% group_by(Species))
x
eval(x)
eval_tidy(x)
rlang::eval_tidy(x)
library(dplyrbench)
rlang::eval_tidy(x)
benchs(iris %>% group_by(Species))
library(dplyrbench)
benchs(iris %>% group_by(Species))
traceback()
library(bench)
benchs(iris %>% group_by(Species))
res <- benchs(iris %>% group_by(Species))
rs
str(res)
library(dplyrbench)
res <- benchs(iris %>% group_by(Species))
res
str(res)
library(dplyrbench)
res <- benchs(iris %>% group_by(Species))
rezs
res
library(dplyrbench)
res <- benchs(iris %>% group_by(Species))
res
library(dplyrbench)
res <- benchs(iris %>% group_by(Species))
res
quo_squash(res)
rlang::quo_squash(res)
str(rlang::quo_squash(res))
library(dplyrbench)
res
res <- benchs(iris %>% group_by(Species))
res
res()
str(res())
str(res
)
library(dplyrbench)
res <- benchs(iris %>% group_by(Species))
res
benchs
res <- benchs(iris %>% group_by(Species))
res
str(res)
library(dplyrbench)
res <- benchs(iris %>% group_by(Species))
res
str(res)
res
str(res)
library(bench)
res
res <- benchs({ df <- tibble(x = 1e6, y = 1:6) ; df %>% group_by(x) } )
res
bench::makr({ df <- tibble(x = 1e6, y = 1:6) ; df %>% group_by(x) } )
bench::mark({ df <- tibble(x = 1e6, y = 1:6) ; df %>% group_by(x) } )
library(dplyr)
bench::mark({ df <- tibble(x = 1e6, y = 1:6) ; df %>% group_by(x) } )
callr::r( function(){ bench::mark({ df <- tibble(x = 1e6, y = 1:6) ; df %>% group_by(x) } ) } )
callr::r( function(){ bench::mark({ df <- tibble::tibble(x = 1e6, y = 1:6) ; df %>% group_by(x) } ) } )
callr::r( function(){ library(dplyr); bench::mark({ df <- tibble::tibble(x = 1e6, y = 1:6) ; df %>% group_by(x) } ) } )
callr::r( function(){ library(dplyr); print(session_info("dplyr")); bench::mark({ df <- tibble::tibble(x = 1e6, y = 1:6) ; df %>% group_by(x) } ) } , libpath = "libs/0.7.7/")
callr::r( function(){ library(dplyr); print(sessioninfo::session_info("dplyr")); bench::mark({ df <- tibble::tibble(x = 1e6, y = 1:6) ; df %>% group_by(x) } ) } , libpath = "libs/0.7.7/")
use_readme_rmd()
f <- function(){
library(dplyr)
df <- tibble(g = rep(1:10, each = 10000), x = 1:100000)
bench::mark(df %>% group_by(g))
}
callr::r(f, libpath = "libs/0.7.7/")
library(purrr)
f <- function(){
library(dplyr)
df <- tibble(g = rep(1:10, each = 10000), x = 1:100000)
bench::mark(df %>% group_by(g))
}
libs <- list.files("libs", full.names = TRUE)
map_dfr(libs, ~callr::r(f, libpath = .))
map_dfr
map_dfr(libs, ~callr::r(f, libpath = .), .id = libs)
map_dfr(libs, ~callr::r(f, libpath = .), .id = "lib")
library(dplyr)
map_dfr(libs, ~callr::r(f, libpath = .)) %>%
mutate(lib = !!libs)
map_dfr(libs, ~callr::r(f, libpath = .)) %>%
mutate(lib = !!libs) %>%
select(lib, everything())
benchs <- function(setup, code){
setup <- substitute(setup)
code  <- substitute(code)
f <- substitute(function(){
library(dplyr)
setup
code
}, list(setup = setup, code = code))
f
}
f({ df <- tibble(x = 1:10)}, 1:10)
rm(benchs)
library(dplyrbench)
benchs(1:10)
benchs(1:10, 1:3)
library(dplyrbench)
benchs(1:10, 1:3)
f <- function(){
library(dplyr)
setup
bench::mark(code)
}
body(f)
substitute(body(f))
deparse(body(f))
substitute(body(f))
substitute(substitute(body(f)))
?substitute
f
body(f)
substitute(body(f))
library(dplyrbench)
benchs(1:10, 1:3)
?trabsmute
?transmute
library(dplyrbench)
benchs
rep(1:10, each = 100000)
benchs(
df <- tibble(x = rnorm(1e7), g = rep(1:e6, each = 10)),
df %>% group_by(g)
)
benchs(
df <- tibble(x = rnorm(1e7), g = rep(1:1e6, each = 10)),
df %>% group_by(g)
)
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e5, each = 10)),
df %>% group_by(g)
)
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e5, each = 10)) %>% group_by(g),
mutate(df, x = +mean(x))
)
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e4, 100)) %>% group_by(g),
mutate(df, x = +mean(x))
)
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e4, 100)) %>% group_by(g),
mutate(df, x = mean(x))
)
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e4, 100)) %>% group_by(g),
summarise(df, x = +mean(x))
)
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e4, 100)) %>% group_by(g),
summarise(df, x = mean(x))
)
f
body(f)
results <- list(
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e4, 100)) %>% group_by(g),
mutate(df, x = +mean(x))
),
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e4, 100)) %>% group_by(g),
mutate(df, x = mean(x))
),
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e4, 100)) %>% group_by(g),
summarise(df, x = +mean(x))
),
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e4, 100)) %>% group_by(g),
summarise(df, x = mean(x))
)
)
bind_rows(results)
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e4, 100)) %>% group_by(g),
mutate(df, x = sum(x) / n())
)
mean_ <- function(...) mean(...)
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e4, 100)) %>% group_by(g),
mutate(df, x = mean_(x))
)
benchs({
mean_ <- function(...) mean(...)
df <- tibble(x = rnorm(1e6), g = rep(1:1e4, 100)) %>% group_by(g)
},
mutate(df, x = mean_(x))
)
benchs({
mean_ <- function(...) mean(...)
df <- tibble(x = rnorm(1e6), g = rep(1:1e5, 10)) %>% group_by(g)
},
mutate(df, x = mean_(x))
)
# non hybrid
benchs({
mean_ <- function(...) mean(...)
df <- tibble(x = rnorm(1e6), g = rep(1:1e5, 10)) %>% group_by(g)
},
summarise(df, x = mean_(x))
)
# hybrid
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e5, 10)) %>% group_by(g),
summarise(df, x = mean(x))
)
# partial hybrid
benchs(
df <- tibble(x = rnorm(1e6), g = rep(1:1e5, 10)) %>% group_by(g),
summarise(df, x = sum(x) / n())
)
ls()
rm(list=ls())
library(dplyrbench)
library(dplyrbench)
library(dplyrbench)
library(dplyrbench)
benchs({
mean_ <- function(...) mean(...)
df <- tibble(x = rnorm(1e6), g = rep(1:1e5, 10)) %>% group_by(g)
},
summarise(df, x = mean_(x))
)
x <- .Last.value
x
bind_rows(x)
?bench
library(dplyrbench)
q()
